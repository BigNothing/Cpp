#include <iostream>
#include <fstream>

/*
Дефинирайте  клас,  описващ  дати  от  календара.

Дефинирайте  за  него  подходящите  get  и  set  методи.

Дефинирайте  конструктор  по  подразбиране  и  такъв  с  параметри за  задаване  на  дата.


Дефинирайте  клас,описващ студент, като включите следните данни: Име, Факултетен номер, Дата на раждане използвайте класа описващ  дати,  Среден  успех.
Дефинирайте  подходящите  get  и  set  методи.
Дефинирайте  конструктор  по подразбиране  и с параметри  за инициализиране  на обекта.

Дефинирайте  метод, който по зададен параметър дата, връща възрастта на студента като брой навършени години.

Да се определя средния успех на потока.

Да сеизвеждат студентите от потока, които са между 18 и 26 години включително, като се предефинира операцията <<.

Данните да се съхраняват във файл.

*/


int count =0;
using namespace std;


class dates{
private:

    int day,mounth,year;

public:

    dates();
    dates(int d,int m, int y);

    int getDay();
    int getYear();
    int getMounth();

    void setDay();
    void setYear();
    void setMounth();





};

dates::dates(){
    do{
        std::cout << "\n Enter day : ";
        std::cin >> day;
        std::cout << "\n Enter mounth : ";
        std::cin >> mounth;
        std::cout << "\n Enter year : ";
        std::cin >> year;

    }while(mounth>12 || mounth < 1 || day < 1 || day > 31);

    std::cout << "\n add successfull";

}

dates::dates(int d, int m, int y){


    std::cin >> d;

    std::cin >> m;

    std::cin >> y;

    day = d; mounth = m; year = y ;

    std::cout << "\n add successfull";
    std::cout << "\n No date avaliable";


}

int dates::getDay (){
    return day;
}
int dates::getMounth (){
    return mounth;
}
int dates::getYear (){
    return year;
}






class student{

    private:

        int facNum;
        string name;
        dates birthDate;
        float middleSuccess;


    public:
        student();
        student(int facNum,string name,dates birthDate,float middleSuccess);

        int getFacNum();
        string getName();
        dates getBirthDate();
        float getMiddleSuccess();

        void setFacNum(int );
        void setName(string );
        void setBirthDate (dates );
        void setMiddleSuccess(float );

        int getYears(dates );

};

//constructor without argiments
student::student(){

        count++;

        std::cout << "\n Enter name of student number  " << count << ": ";
        std::cin >> name;
        std::cout << "\n Enter facNum : ";
        std::cin >> facNum;
        std::cout << "\n Enter midSuccess : ";
        std::cin >> middleSuccess;



        std::cout << "\n add successfull";

}

//with argiuments
student::student(int facNum, string name, dates birthDate, float middleSuccess){

    this->facNum=facNum;
    this->name=name;
    this->birthDate=birthDate;
    this->middleSuccess=middleSuccess;

}

//getters
int student::getFacNum (){
    return facNum;
}

string student::getName (){
    return name;
}
dates student::getBirthDate (){
    return birthDate;
}
float student::getMiddleSuccess (){
    return middleSuccess;
}


//setters
void student::setFacNum (int facNum){
    this->facNum=facNum;
}

void student::setName (string name){
   this->name=name;
}
void student::setBirthDate (dates birthDate){
    this->birthDate=birthDate;
}
void student::setMiddleSuccess (float middleSuccess){
    this->middleSuccess=middleSuccess;
}



int student::getYears (dates curDate){

    if(curDate.getMounth () == birthDate.getMounth ()){

        if(curDate.getDay () >= birthDate.getDay ()){
            return curDate.getYear ()- birthDate.getYear () ;
        }
        else {
            cout << "\n "  << birthDate.getDay () - curDate.getDay ()<< " days  to birthday " ;
            return curDate.getYear ()- birthDate.getYear () -1 ;
        }


    }

    else if(curDate.getMounth () > birthDate.getMounth ()){
        return curDate.getYear ()- birthDate.getYear () ;

    }

    else if(curDate.getMounth () < birthDate.getMounth ()){

        cout << "\n " << birthDate.getMounth() - curDate.getMounth () << " mounths to birthday ";

        return curDate.getYear ()- birthDate.getYear () -1 ;
    }
}



int main()
{
    int gNum;
    float midScore=0;
    ofstream myfile;
    myfile.open ("group.txt");




    //set current date
    cout <<"\n Enter current date: ";
    dates currDate;


    //set group info
    std :: cout << "\n Enter group number : " << endl;

    std :: cin >> gNum;

    student students[gNum];


    //calc middle group score and print students btw 18 and 26
    for(int i=0; i<gNum; i++){


        myfile << "\n Student name : " << students[i].getName ()
               << "\n facNum : " << students[i].getFacNum ()
               << "\n midScore : " << students[i].getMiddleSuccess ()
               << "\n years : " << students[i].getYears (currDate);



        if(students[i].getYears (currDate)>=18 && students[i].getYears (currDate)<=26 ){

            cout << "\n Student btw 18 and 26 : " << students[i].getName ();


        }

        midScore = midScore + students[i].getMiddleSuccess ();

    }

    midScore = midScore / gNum;

    myfile << "\n Middle score of the group is : " << midScore << "\n ";

    cout << "\n Middle score of the group is : " << midScore << "\n " ;






    myfile.close();


    return 0;
}

